fn fib(n) {
    if <=(n,2) then { 1 } else {
        let f1 = fib(-(n,1));
        let f2 = fib(-(n,2));
        +(f1, f2)
    }
}

fn reverse(l) {
    let first = hd(l);
    let rest = tl(l);
    if is_empty(rest)
            then { l }
            else {
                let r = reverse(rest);
                append(r, list(first))
                }
}

fn append(left, right) {
    if is_empty(left) then {right} else {
        cons(
            hd(left),
            append( tl(left), right )
            )
    }
}
fn build_fib_list_reverse(n) {
    if ==(n,1) then { list(1) } else {
    if ==(n,2) then {list(1,1) } else {
        let prev = build_fib_list_reverse( -(n,1) );
        let p1 = hd(prev);
        let p2 = hd(tl(prev));
        let f = +(p1,p2);
        cons(f, prev)
    }
    }
}

fn build_fib_list(n) {
    reverse( build_fib_list_reverse(n) )
}

fn main()
{
    let n = 8;
    let y = fib(n);
    writeline@stdout << y;
    let step = build_fib_list_reverse(n);
    writelist@stdout<<step;
    let z = build_fib_list(n);
     writelist@stdout<<z;
    //let q = reverse( list(1,2,3,4,5,6) );
    //writelist@stdout<<q;
    0
}